{"name":"Bird","tagline":"Twitter API wrapper","body":"# Bird [![Build Status](https://travis-ci.org/aackerman/bird.png?branch=master)](https://travis-ci.org/aackerman/bird)\r\n\r\n### A wrapper around [request](https://github.com/mikeal/request) to consume the Twitter API\r\n\r\n### Examples\r\n\r\nA repo with examples can be viewed [here](https://github.com/aackerman/bird-example-app).\r\n\r\n### Oauth\r\n\r\nIt's necessary with every call to include oauth credentials for your app and the credentials of the user on behalf of whom you are making the request.\r\n\r\n```js\r\nvar options = {\r\n  oauth:  {\r\n    consumer_key: 'XXXXXXXXXXXXXXXXXX',\r\n    consumer_secret: 'XXXXXXXXXXXXXXX',\r\n    token: 'XXXXXXXXXXXXXXXXXX',\r\n    token_secret: 'XXXXXXXXXXXXXXXXX'\r\n  }\r\n};\r\n```\r\n\r\nThe options would be passed to a method in Bird with the consumer key and consumer secret of your app in place of the placeholder I've shown. And the token and token secret of the user requested through the normal oauth procedure. An example can be found in the example repo above.\r\n\r\n### Streams\r\n\r\nBird is a wrapper around [request](https://github.com/mikeal/request). And [request](https://github.com/mikeal/request) offers a stream interface and the standard Node callback interface. Bird does this just as well.\r\n\r\nImagine an express route that returns a users home timeline as json. You can pipe the call directly to the response.\r\n\r\n```js\r\napp.get('/home', function(req, res){\r\n  // assuming you have the users oauth credentials\r\n  Bird.timelines.home({ oauth: oauth }).pipe(res)\r\n});\r\n```\r\n\r\n### Media\r\n\r\nUploading media [is a 2-part process](https://dev.twitter.com/rest/public/uploading-media-multiple-photos).\r\n\r\n```js\r\nvar Bird = require('bird');\r\nvar path = require('path');\r\n\r\nvar options = {\r\n  oauth:  {\r\n    consumer_key: 'XXXXXXXXXXXXXXXXXX',\r\n    consumer_secret: 'XXXXXXXXXXXXXXX',\r\n    token: 'XXXXXXXXXXXXXXXXXX',\r\n    token_secret: 'XXXXXXXXXXXXXXXXX'\r\n  },\r\n  media: path.resolve('path/to/filename')\r\n};\r\n\r\nBird.media.upload(options, function(err, r, body) {\r\n  if (err) {\r\n   throw err;\r\n  }\r\n\r\n  var options = {\r\n    oauth:  {\r\n      consumer_key: 'XXXXXXXXXXXXXXXXXX',\r\n      consumer_secret: 'XXXXXXXXXXXXXXX',\r\n      token: 'XXXXXXXXXXXXXXXXXX',\r\n      token_secret: 'XXXXXXXXXXXXXXXXX'\r\n    },\r\n    status: 'hello world',\r\n    media_ids: JSON.parse(body).media_id_string\r\n  };\r\n  Bird.tweets.tweet(options, function(err, r, body){\r\n    if (err) {\r\n      throw err;\r\n    }\r\n    console.log('successfully tweeted media');\r\n  });\r\n});\r\n```\r\n\r\n## Promises\r\n\r\nPromises are not available directly with `bird`, but it's easy to wrap node-style error first methods with [`Q.denodeify`](https://www.npmjs.com/package/q). Here is an example.\r\n\r\n```js\r\nvar Bird  = require('bird');\r\nvar Q     = require('q');\r\nvar tweet = Q.denodeify(Bird.tweets.tweet);\r\n\r\ntweet({\r\n  oauth: oauth,\r\n  status: 'Tweeting with promises!'\r\n}).then(function(result){\r\n  var resp = result[0], body = result[1];\r\n});\r\n```\r\n\r\n## Routes\r\n\r\n```\r\n❯ node\r\n> require('./index')\r\n{ auth:\r\n   { requestToken: ...,\r\n     accessToken: ... },\r\n  timelines:\r\n   { home: ...,\r\n     mentions: ...,\r\n     user: ...,\r\n     retweetsOfMe: ... },\r\n  tweets:\r\n   { retweets: ...,\r\n     show: ...,\r\n     oembed: ...,\r\n     retweeters: ...,\r\n     update: ...,\r\n     tweet: ...,\r\n     destroy: ...,\r\n     retweet: ...,\r\n     updateWithMedia: ... },\r\n  search: { tweets: ... },\r\n  messages:\r\n   { index: ...,\r\n     sent: ...,\r\n     show: ...,\r\n     destroy: ...,\r\n     new: ... },\r\n  friends: { index: ..., list: ... },\r\n  friendships:\r\n   { noRetweets: ...,\r\n     show: ...,\r\n     lookup: ...,\r\n     incoming: ...,\r\n     outgoing: ...,\r\n     create: ...,\r\n     destroy: ...,\r\n     update: ... },\r\n  followers: { index: ..., list: ... },\r\n  account:\r\n   { settings: ...,\r\n     verify: ...,\r\n     banner: ...,\r\n     updateSettings: ...,\r\n     updateDeliveryDevice: ...,\r\n     updateProfile: ...,\r\n     updateProfileBackgroundImage: ...,\r\n     updateProfileColors: ...,\r\n     updateProfileImage: ...,\r\n     removeProfileBanner: ...,\r\n     updateProfileBanner: ... },\r\n  blocks:\r\n   { list: ...,\r\n     index: ...,\r\n     create: ...,\r\n     destroy: ... },\r\n  users:\r\n   { lookup: ...,\r\n     show: ...,\r\n     search: ...,\r\n     contributees: ...,\r\n     contributors: ...,\r\n     suggestionsWithSlug: ...,\r\n     suggestionsWithSlugMembers: ...,\r\n     reportSpam: ... },\r\n  favorites:\r\n   { list: ...,\r\n     create: ...,\r\n     destroy: ... },\r\n  lists:\r\n   { list: ...,\r\n     statuses: ...,\r\n     memberships: ...,\r\n     subscribers: ...,\r\n     showSubscribers: ...,\r\n     removeMember: ...,\r\n     createMember: ...,\r\n     removeSubscriber: ...,\r\n     createSubscriber: ... },\r\n  geo:\r\n   { place: ...,\r\n     geocode: ...,\r\n     search: ...,\r\n     similarPlaces: ...,\r\n     createPlace: ... },\r\n  trends:\r\n   { place: ...,\r\n     available: ...,\r\n     closest: ... },\r\n  spam: { report: ... },\r\n  help:\r\n   { configuration: ...,\r\n     languages: ...,\r\n     privacy: ...,\r\n     tos: ... },\r\n  application: { rateLimits: ... },\r\n  media: { upload: ... } }\r\n```\r\n\r\n## Author\r\n\r\n| [![twitter/_aaronackerman_](http://gravatar.com/avatar/c73ff9c7e654647b2b339d9e08b52143?s=70)](http://twitter.com/_aaronackerman_ \"Follow @_aaronackerman_ on Twitter\") |\r\n|---|\r\n| [Aaron Ackerman](https://twitter.com/_aaronackerman_) |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}