{"name":"Bird","body":"## Bird.js\r\n\r\n### Simple wrapper around request to consume the Twitter API\r\n\r\nLike there needed to be another one, right? Well sometimes you just have to write it yourself.\r\n\r\nThe core API is pretty simple to understand.\r\n\r\nAll functions use the following signature (options, callback). All parameters on the options object aside from the oauth parameter will be parsed into the route's url. Bird.login and Bird.auth_callback, only allow for a callback interface all other routes allow the option to use a streaming interface in addition to the standard callback interface.\r\n\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar qs = require('querystring');\r\n\r\nvar Bird = require('bird');\r\nvar oauth = {\r\n  consumer_key : 'XXXXXXXXXXXXXXXXXX',\r\n  consumer_secret : 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\r\n  callback: 'http://localhost:7700/callback'\r\n};\r\n\r\nvar app = express.createServer();\r\n\r\n//setup express middleware\r\napp.use(express.bodyParser());\r\napp.use(express.cookieParser());\r\napp.use(express.session({secret: \"a\"}));\r\n\r\napp.get('/', function(req, res){\r\n  res.send('<a href=\"/login\">Login</a><br><a href=\"/home_timeline.json\">Home Timeline</a>');\r\n});\r\n\r\napp.get('/login', function(req, res) {\r\n  req.session.oauth = oauth;\r\n  Bird.login(req.session.oauth, function(err,r,body){\r\n    if (err) {\r\n      //add error handling here for when twitter returns an error\r\n      res.send(\"Error getting OAuth request token\");\r\n    } else {\r\n      //parse tokens received from twitter\r\n      var tokens = qs.parse(body);\r\n      //set temporary oauth tokens for the users session\r\n      req.session.oauth.token = tokens.oauth_token;\r\n      req.session.oauth.token_secret = tokens.oauth_token_secret;\r\n\r\n      //redirect user to authorize with temporary token\r\n      res.redirect(\"https://twitter.com/oauth/authorize?oauth_token=\" + tokens.oauth_token);\r\n    }\r\n  });\r\n});\r\n\r\napp.get('/logout', function(req, res){\r\n  req.session.destroy();\r\n  res.redirect('/');\r\n});\r\n\r\napp.get('/callback', function(req, res){\r\n  //set oauth verifier for the users session\r\n  req.session.oauth.verifier = req.query.oauth_verifier;\r\n  Bird.auth_callback(req.session.oauth, function(err, r, body){\r\n    if (err) {\r\n      //add error handling here for when twitter returns an error\r\n      res.send(err);\r\n    } else {\r\n      //parse tokens received from twitter\r\n      var tokens = qs.parse(body);\r\n      //set permanent access tokens for the users session\r\n      req.session.oauth.token = tokens.oauth_token;\r\n      req.session.oauth.token_secret = tokens.oauth_token_secret;\r\n\r\n      //redirect the user\r\n      res.redirect('/');\r\n    }\r\n  });\r\n});\r\n\r\n//route using a stream\r\napp.get('/home_timeline.json', function(req, res){\r\n  var options = req.query;\r\n  options.oauth = req.session.oauth;\r\n\r\n  //Bird.home_timeline will return a stream that can be piped to a response\r\n  Bird.home_timeline(options).pipe(res);\r\n});\r\n\r\nvar port = 7700;\r\n\r\napp.listen(port);\r\n\r\nconsole.log('server listening on port ' + port);\r\n```\r\n","tagline":"Twitter API wrapper","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}